name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm install

    - name: make .env
      run: |
        touch .env
        echo "${{ secrets.SECRET_ENV }}" > .env
  
    - name: Build the Docker image
      run: CI=false npm run build

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build the Docker image
      run: docker build -t monlang/soloplay:latest .

    - name: Tagging
      run: docker tag monlang/soloplay:latest monlang/soloplay:latest

    - name: Push to Docker Hub
      run: docker push monlang/soloplay:latest

    - name: Deploy to server
      uses: fifsky/ssh-action@master
      id: deploy
      with:
        command: |
          CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-80")
          if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
          sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          sudo docker pull ${{secrets.DOCKER_REPO}}/soloplay:latest
          sudo docker run -p 80:80 monlang/soloplay:latest
        host: ${{secrets.HOST}}
        user: ${{secrets.USERNAME}}
        key: ${{secrets.KEY}}

